---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Deploy EC2 instance and bootstrap a kubernetes deployment via kops'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Parent Stacks'
      Parameters:
      - ParentVPC
      - ParentSSHBastionStack
    - Label:
        default: 'EC2 Parameters'
      Parameters:
      - InstanceType
      - Name
      - SubnetName
      - KeyName
      - IAMUserSSHAccess
      - LogsRetentionInDays
    - Label:
        default: 'S3 Parameters'
      Parameters:
      - SetupFiles
      - StateStore
Parameters:
  ParentVPC:
    Description: 'Stack name of parent VPC stack based on vpc/vpc-*azs.yaml template.'
    Type: String
  ParentSSHBastionStack:
    Description: 'Optional Stack name of parent SSH bastion host/instance stack based on vpc/vpc-ssh-bastion.yaml template.'
    Type: String
    Default: ''
  KeyName:
    Description: 'Optional key pair of the ec2-user to establish a SSH connection to the EC2 instance.'
    Type: 'String'
    Default: ''
  IAMUserSSHAccess:
    Description: 'Synchronize public keys of IAM users to enable personalized SSH access'
    Type: String
    Default: false
    AllowedValues:
    - true
    - false
  InstanceType:
    Description: 'The instance type for the EC2 instance.'
    Type: String
    Default: 't2.micro'
    AllowedValues:
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
  Name:
    Description: 'The name for the EC2 instance.'
    Type: String
    Default: 'Kubernetes'
  SubnetName:
    Description: 'Subnet name of parent VPC stack based on vpc/vpc-*azs.yaml template.'
    Type: String
    Default: 'SubnetAPublic'
  LogsRetentionInDays:
    Description: 'Specifies the number of days you want to retain log events.'
    Type: Number
    Default: 14
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
  SetupFiles:
    Description: 'S3 Bucket where setup resources are archived'
    Type: String
  StateStore:
    Description: 'Terraform configuration state store files for kubernetes stack'
    Type: String

Mappings:
  RegionMap:
    'us-east-1':
      UBUNTU: 'ami-33e4bc49'
    'us-east-2':
      UBUNTU: 'ami-854b61e0'
    'us-west-1':
      UBUNTU: 'ami-915f5cf1'
    'us-west-2':
      UBUNTU: 'ami-b88c3bc0'
Conditions:
  HasKeyName: !Not [!Equals [!Ref KeyName, '']]
  HasIAMUserSSHAccess: !Equals [!Ref IAMUserSSHAccess, 'true']
  HasSSHBastionSecurityGroup: !Not [!Equals [!Ref ParentSSHBastionStack, '']]
  HasNotSSHBastionSecurityGroup: !Equals [!Ref ParentSSHBastionStack, '']
Resources:
  ElasticIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      InstanceId: !Ref VirtualMachine
      Domain: vpc
  Logs:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: !Ref LogsRetentionInDays
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Ref Name
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVPC}-VPC'
  SecurityGroupInSSHBastion:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: HasSSHBastionSecurityGroup
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId:
        'Fn::ImportValue': !Sub '${ParentSSHBastionStack}-SecurityGroup'
  SecurityGroupInSSH1:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: HasNotSSHBastionSecurityGroup
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      CidrIp: 76.72.51.91/32
  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: '/'
      Roles:
      - !Ref IAMRole
  IAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - 'ec2.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Path: '/'
      Policies:
      - PolicyName: logs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'logs:CreateLogGroup'
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            - 'logs:DescribeLogStreams'
            Resource:
            - 'arn:aws:logs:*:*:*'
      - PolicyName: s3-access
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 's3:*'
            Resource:
            - !Sub 'arn:aws:s3:::${SetupFiles}'
            - !Sub 'arn:aws:s3:::${SetupFiles}/*'
            - !Sub 'arn:aws:s3:::${StateStore}'
            - !Sub 'arn:aws:s3:::${StateStore}/*'
      - PolicyName: kops-access
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'ec2:*'
            - 'iam:*'
            - 'vpc:*'
            - 'route53:*'
            - 's3:*'
            - 'autoscaling:*'
            - 'elasticloadbalancing:*'
            Resource:
            - '*'
  IAMPolicySSHAccess:
    Type: 'AWS::IAM::Policy'
    Condition: HasIAMUserSSHAccess
    Properties:
      Roles:
      - !Ref IAMRole
      PolicyName: iam
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - 'iam:ListUsers'
          Resource:
          - '*'
        - Effect: Allow
          Action:
          - 'iam:ListSSHPublicKeys'
          - 'iam:GetSSHPublicKey'
          Resource:
          - !Sub 'arn:aws:iam::${AWS::AccountId}:user/*'
  VirtualMachine:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        config:
          packages:
            yum:
              awslogs: []
          files:
            '/etc/awslogs/awscli.conf':
              content: !Sub |
                [default]
                region = ${AWS::Region}
                [plugins]
                cwlogs = cwlogs
              mode: '000644'
              owner: root
              group: root
            '/etc/awslogs/awslogs.conf':
              content: !Sub |
                [general]
                state_file = /var/lib/awslogs/agent-state
                [/var/log/messages]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/messages
                log_stream_name = {instance_id}/var/log/messages
                log_group_name = ${Logs}
                [/var/log/secure]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/secure
                log_stream_name = {instance_id}/var/log/secure
                log_group_name = ${Logs}
                [/var/log/cron]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/cron
                log_stream_name = {instance_id}/var/log/cron
                log_group_name = ${Logs}
                [/var/log/cloud-init.log]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/cloud-init.log
                log_stream_name = {instance_id}/var/log/cloud-init.log
                log_group_name = ${Logs}
                [/var/log/cfn-init.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-init.log
                log_stream_name = {instance_id}/var/log/cfn-init.log
                log_group_name = ${Logs}
                [/var/log/cfn-hup.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-hup.log
                log_stream_name = {instance_id}/var/log/cfn-hup.log
                log_group_name = ${Logs}
                [/var/log/cfn-init-cmd.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-init-cmd.log
                log_stream_name = {instance_id}/var/log/cfn-init-cmd.log
                log_group_name = ${Logs}
                [/var/log/cloud-init-output.log]
                file = /var/log/cloud-init-output.log
                log_stream_name = {instance_id}/var/log/cloud-init-output.log
                log_group_name = ${Logs}
                [/var/log/dmesg]
                file = /var/log/dmesg
                log_stream_name = {instance_id}/var/log/dmesg
                log_group_name = ${Logs}
              mode: '000644'
              owner: root
              group: root
            '/etc/cfn/cfn-hup.conf':
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            '/etc/cfn/hooks.d/cfn-auto-reloader.conf':
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.VirtualMachine.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init --verbose --stack=${AWS::StackName} --region=${AWS::Region} --resource=VirtualMachine
                runas=root
          services:
            sysvinit:
              awslogs:
                enabled: true
                ensureRunning: true
                packages:
                  yum:
                  - awslogs
                files:
                - '/etc/awslogs/awslogs.conf'
                - '/etc/awslogs/awscli.conf'
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                - '/etc/cfn/cfn-hup.conf'
                - '/etc/cfn/hooks.d/cfn-auto-reloader.conf'
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', UBUNTU]
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
      - !Ref SecurityGroup
      KeyName: !If [HasKeyName, !Ref KeyName, !Ref 'AWS::NoValue']
      UserData:
        'Fn::Base64': !Sub |
           #!/bin/bash -x
           /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource VirtualMachine --region ${AWS::Region}
           /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource VirtualMachine
           cd /home/ubuntu
           apt-get update
           apt-get install -y python-pip nano git wget lxde xrdp
           git clone https://github.com/aws-samples/aws-workshop-for-kubernetes.git
           wget https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/debian_amd64/amazon-ssm-agent.deb
           dpkg -i amazon-ssm-agent.deb
           start amazon-ssm-agent
           start lxdm
           echo -e "ubuntu\nubuntu" | passwd ubuntu
           wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
           dpkg -i google-chrome-stable_current_amd64.deb
           apt-get -f install
           apt-get autoremove -y
           /usr/share/debconf/fix_db.pl
           diff -u /var/cache/debconf/config.dat{-old,}    | grep ^[+-]Name
           diff -u /var/cache/debconf/templates.dat{-old,} | grep ^[+-]Name
           dpkg-reconfigure dictionaries-common
           apt-get upgrade
           apt-get install -y libgconf2-4 libnss3-1d libxss1
           apt-get -f install -y
           pip install awscli
           aws s3 cp s3://${SetupFiles}/kops-setup .
           touch /root/.bash_profile
           echo 'export export HOME=/root' >> /root/.bash_profile
           echo 'export PATH=$PATH:$HOME:/usr/local/bin/' >> /root/.bash_profile
           . /root/.bash_profile
           sed -i 's/BUCKET_NAME/${StateStore}/g' kops-setup
           AWS_REGION=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone | sed 's/\(.*\)[a-z]/\1/')
           sed -i 's/REGION/"$AWS_REGION"/g' kops-setup
           . ./kops-setup
           mkdir templates
           aws s3 cp s3://${SetupFiles}/cluster-monitoring/ templates/ --recursive
           mkdir /home/ubuntu/Desktop
           sleep 300
           aws s3 cp s3://${SetupFiles}/monitoring-setup .
           /bin/sh monitoring-setup
           aws s3 cp s3://${SetupFiles}/efk-setup .
           /bin/sh efk-setup
      SubnetId:
        'Fn::ImportValue': !Sub '${ParentVPC}-${SubnetName}'
      Tags:
      - Key: Name
        Value: !Join [ "-", [!Ref Name,Bastion] ]
  RecoveryAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Recovering instance when underlying hardware fails.'
      Namespace: 'AWS/EC2'
      MetricName: StatusCheckFailed_System
      Statistic: Minimum
      Period: 60
      EvaluationPeriods: 5
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - !Sub 'arn:aws:automate:${AWS::Region}:ec2:recover'
      Dimensions:
      - Name: InstanceId
        Value: !Ref VirtualMachine
Outputs:
  TemplateID:
    Description: 'cloud template id'
    Value: 'ec2-kube-bastion'
  IPAddress:
    Description: 'The public IP address of the EC2 instance.'
    Value: !Ref ElasticIP
    Export:
      Name: !Sub '${AWS::StackName}-IPAddress'
